// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todo.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findAllTodos = `-- name: FindAllTodos :many
SELECT id, title, description, status, created_at, updated_at from todos
`

func (q *Queries) FindAllTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, findAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTodoById = `-- name: FindTodoById :one
SELECT id, title, description, status, created_at, updated_at FROM todos
WHERE id = $1
`

func (q *Queries) FindTodoById(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRow(ctx, findTodoById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertTodo = `-- name: InsertTodo :one
INSERT INTO todos (title, description, status) 
VALUES ($1, $2, $3)
RETURNING id, title, description, status, created_at, updated_at
`

type InsertTodoParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Status      bool        `json:"status"`
}

func (q *Queries) InsertTodo(ctx context.Context, arg InsertTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, insertTodo, arg.Title, arg.Description, arg.Status)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const toggleTodoStatus = `-- name: ToggleTodoStatus :one
UPDATE todos SET status = NOT status
WHERE id = $1
RETURNING id, title, description, status, created_at, updated_at
`

func (q *Queries) ToggleTodoStatus(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRow(ctx, toggleTodoStatus, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
